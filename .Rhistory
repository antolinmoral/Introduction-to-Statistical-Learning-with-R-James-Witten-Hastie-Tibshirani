fix(Carseats)
fix(Carseats)
library(MASS) # Built-in dataset library
library(ISLR) # Data library for Introduction to Statistial Learning in R, Hastie Tibshirani
fix(Carseats)
names(Carseats)
names(Boston) # The Boston dataframe
?Boston
plot(medv~lstat, Boston)
fit1 = lm(medv~lstat, data=Boston)
fit1
summary(fit1)
abline(fit1, col="red")
names(fit1)
hist(fit1$residuals) # See if residual are normally distributed
Boston
confint(fit1)
predict(fit1, data.frame(lstat=c(5,10,15)), interval="confidence") # See lower and upper confidence band
### Multiple Linear regression
fit2 = lm(medv ~ lstat + age, data=Boston)
fit2
summary(fit2)
fit3 = lm(medv ~ ., data=Boston)
fit3
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4 = update(fit3, ~.-age-indus)
summary(fit4)
par(mfrow=c(2,2))
plot(fit4)
### Non-linear terms and Interactions
fit5 = lm(medv ~ lstat*age,Boston)
summary(fit5)
fit6= lm(medv ~ lstat + I(lstat^2), data=Boston)
summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat, fitted(fit6), col="red", pch=20) # Plot the fitted fit6 along lstat
fit7 = lm(medv ~ poly(lstat,4))
points(lstat, fitted(fit7), col="blue", pch=20) # Plot the fitted fit7 along lstat; bit overfitted
plot(1:20,1:20, pch=1:20, cex=2) # Plot all 20 plotting characters
### Qualitative predictors
fix(Carseats)
names(Carseats)
names(Carseats)
library(ISLR) # Data library for Introduction to Statistial Learning in R, Hastie Tibshirani
fix(Carseats)
names(Carseats)
detach("package:ISLR", unload=TRUE)
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
names(Carseats)
names(Carseats)
names(Auto)
names(Carseats)
names(Caravan)
names(College)
names(Default)
names(Hitters)
names(Khan)
names(Portfolio)
names(Wage)
names(Weakly)
names(Weekly)
names(Smarket)
names(OJ)
names(Carseats)
detach("package:ISLR", unload=TRUE)
remove.packages("ISLR")
install.packages("ISLR")
library(ISLR) # Data library for Introduction to Statistial Learning in R, Hastie Tibshirani
names(Carseats)
names(Caravan)
summary(Caravan)
names(Carseats)
summary(Caravan)
detach("package:ISLR", unload=TRUE)
summary(Caravan)
names(Carseats)
rm(Carseats)
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
names(Carseats)
names(Carseats)
summary(Caravan)
summary(head(Caravan))
size(Caravan)
summary(head(Carseats))
summary(head(Carseats))
size(Carseats)
sim(Carseats)
dim(Carseats)
fix(Carseats)
fit1 = lm(Sales~.+Income:Adverstising+Age:Price, Carseats)
fit1 = lm(Sales~.+Income:Advertising+Age:Price, Carseats)
summary(fit1)
contrasts(Carseats$ShelveLoc)
regplot = function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price, Sales)
regplot = function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
attach(Carseats)
regplot(Price, Sales)
regplot(Price, Sales, xlab="Price", ylab="Sales", col="blue", pch=20)
names(Boston) # The Boston dataframe
?Boston
plot(medv~lstat, Boston)
fit1 = lm(medv~lstat, data=Boston)
fit1
summary(fit1)
abline(fit1, col="red")
names(fit1)
hist(fit1$residuals) # See if residual are normally distributed
Boston
confint(fit1)
confint(fit1) // Confidence interval for intercept and slope
fit3 = lm(medv ~ ., data=Boston)
fit3
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit3 = lm(medv ~ ., data=Boston)
fit3
summary(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4 = update(fit3, ~.-age-indus)
summary(fit4)
par(mfrow=c(2,2))
plot(fit4)
fit4 = update(fit3, ~.-age-indus)
summary(fit4)
par(mfrow=c(2,2))
plot(fit4)
library(ISLR)
summary(Hitters)
?ISLR
with(Hitters, sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters, sum(is.na(Salary)))
library(leaps)
install.packages("leaps")
library(leaps)
regfit.full = regsubsets(Salary~., data=Hitters)
summary(regfit.full)
regfit.full = regsubsets(Salary~., data=Hitters, nvmax=19)
summary(regfit.full)
regfit.full = regsubsets(Salary~., data=Hitters, nvmax=19)
summary(regfit.full)
names(regfit.full)
reg.summary = summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
plot(reg.summary$rms, xlab="Number of variables", ylab="Cp")
plot(reg.summary$rsq, xlab="Number of variables", ylab="Cp")
plot(reg.summary$rss, xlab="Number of variables", ylab="Cp")
plot(reg.summary$bic, xlab="Number of variables", ylab="Cp")
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$co)
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], pch=20, col="red")
plot(regfit.full,scale=Cp)
plot(regfit.full,scale="Cp")
version
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", dependencies = TRUE)
library("StanHeaders", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:StanHeaders", unload=TRUE)
library("StanHeaders", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:StanHeaders", unload=TRUE)
library(rstan)
coef(regfit.full, 10)
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
# Chunk 3
library(ISLR)
summary(Hitters)
# Chunk 4
with(Hitters, sum(is.na(Salary)))
Hitters=na.omit(Hitters)
with(Hitters, sum(is.na(Salary)))
# Chunk 5
library(leaps)
regfit.full = regsubsets(Salary~., data=Hitters)
summary(regfit.full)
# Chunk 6
regfit.full = regsubsets(Salary~., data=Hitters, nvmax=19)
reg.summary = summary(regfit.full)
names(reg.summary)
plot(reg.summary$cp, xlab="Number of variables", ylab="Cp")
which.min(reg.summary$cp)
points(10, reg.summary$cp[10], pch=20, col="red")
plot(regfit.full,scale="Cp")
coef(regfit.full, 10)
class(Hitters)
regfit.fwd = regsubsets(Salary~., data=Hitters, nvmax=19, method="forward")
summary(regfit.fwd)
plot(regfit.fwd, scale=Cp)
plot(regfit.fwd, scale="Cp")
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace-FALSE)
train = sample(seq(263),180,replace=FALSE)
train
dim(Hitters)
set.seed(1)
train = sample(seq(263),180,replace=FALSE)
train
regfit.fwd = regsubsets(Salary~., data=Hitters[train,], nvmax=19, method="forward")
val.errors = rep(NA, 19)
x.test = model.matrix(Salary~., data=Hitters[-train,])
for(i in 1:19){
coefi = coef(regfit.fwd, id=i)
pred = x.test[,names(coefi)]%*%coefi
val.errors[i] = mean((Hitters$Salary[-train]-pred)^2)
}
plot(sqrt(val.errors), ylab="Root MSE", ylim=c(300,400), pch=19, type="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,col="blue")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,col="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,col="b")
points(sqrt(regfit.fwd$rss[-1]/180),col="blue",pch=19,type="b")
legend("topright", legend=c("Training","Validation"),col=c("blue","black"))
legend("topright", legend=c("Training","Validation"),col=c("blue","black"),pch=19)
for(i in 1:19){
coefi = coef(regfit.fwd, id=i)
print(coefi)
pred = x.test[,names(coefi)]%*%coefi
val.errors[i] = mean((Hitters$Salary[-train]-pred)^2)
}
regfit.fwd$rss
regfit.fwd
regfit.fwd$ress
regfit.fwd$call
regfit.fwd$call[[1]]
regfit.fwd$call[[2]]
regfit.fwd$call[[3]]
regfit.fwd$call[[5]]
mat[, names(coefi)] %*% coefi
predict.regsubsets = function(object, newdata, id, ...){
form = as.formula(object.call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
as.formula(regfit.fwd.call[[2]])
(regfit.fwd).call[[2]]
regfit.fwd
f=regfit.fwd
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
folds
table(folds)
cv.errors = matrix(NA,10,19)
folds[1]
]]
folds[[1]]
class(folds)
set.seed(11)
folds = sample(rep(1:10,length=nrow(Hitters)))
table(folds)
cv.errors = matrix(NA,10,19)
for(k in 1:10){ # Loop for folds
best.fit = regsubsets(Salary~., data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){ # Loop for sizes of picked feature best subsets
pred = predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i] = mean((Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv = sqrt(apply(cv.errors,2,mean))
plot(rmse.cv, pch=19, type="b")
predict.regsubsets = function(object, newdata, id, ...){
form = as.formula(object.call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
for(k in 1:10){ # Loop for folds
best.fit = regsubsets(Salary~., data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){ # Loop for sizes of picked feature best subsets
pred = predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i] = mean((Hitters$Salary[folds==k]-pred)^2)
}
}
as.formula(regfit.fwd$call[[2]])
predict.regsubsets = function(object, newdata, id, ...){
form = as.formula(object$call[[2]])
mat = model.matrix(form, newdata)
coefi = coef(object, id=id)
mat[, names(coefi)] %*% coefi
}
for(k in 1:10){ # Loop for folds
best.fit = regsubsets(Salary~., data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){ # Loop for sizes of picked feature best subsets
pred = predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i] = mean((Hitters$Salary[folds==k]-pred)^2)
}
}
rmse.cv = sqrt(apply(cv.errors,2,mean))
plot(rmse.cv, pch=19, type="b")
for(k in 1:10){ # Loop for folds
best.fit = regsubsets(Salary~., data=Hitters[folds!=k,],nvmax=19,method="forward")
for(i in 1:19){ # Loop for sizes of picked feature best subsets
pred = predict(best.fit,Hitters[folds==k,], id=i)
cv.errors[k,i] = mean((Hitters$Salary[folds==k]-pred)^2)
}
}
library(glmnet)
x=model.matrix(Salary~., data=Hitters)
y=Hitters$Salary
library(glmnet)
x=model.matrix(Salary~.-1, data=Hitters)
y=Hitters$Salary
fit.ridge = glmnet(x,y,alpha=0)
plot(fit.ridge, xvar="lambda", label=TRUE)
cv.ridge = cv.glmnet(x,y,alpha=0)
plot(cv.ridge)
fit.lasso = glmnet(x,y)
fit.lasso = glmnet(x,y)
plot(fit.lasso, xvar="lambda", label=TRUE)
cv.lasso = cv.glmnet(x,y)
plot(fit.lasso, xvar="dev", label=TRUE)
plot(cv.lasso)
coef(cv.lasso)
lasso.tr = glmnet(x[train,], y[train])
lasso.tr
pred = predict(lasso.tr, x[-train,])
dim(pred)
rmse = sqrt(apply((y[-train]-pred)^2, 2, mean))
plot(log(lasso.tr$lambda), rmse, type="b", xlab="Log(lambda)")
lam.best = lasso.tr$lambda[order(rmse)[1]]
lam.best
coef(lasso.tr, s=lam.best)
cv.lasso
names(cv.lasso)
require(ISLR)
require(ISLR)
attach(Wage)
fit = lm(wage~poly(age,4),data = Wage)
summary(fit)
agelims = range(age)
age.grid = seq(from=agelims[1],to=agelims[2])
pred = predict(fit, newdata = list(age=age.grid), se=T)
se.bands = cbind(pred$fit+2*pred$se,pred$fit-2*pred$se)
plot(age, wage, col="darkgrey")
lines(age.grid, pred$fit, lwd=2, col=blue)
lines(age.grid, pred$fit, lwd=2, col="blue")
matlines(age.grid, se.bands, col="blue", lty=2)
